// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Mux16(sel=zx,a=false,b=true,out=zx16);
    Mux16(sel=nx,a=false,b=true,out=nx16);

    Mux16(sel=zy,a=false,b=true,out=zy16);
    Mux16(sel=ny,a=false,b=true,out=ny16);

    // zero x
    Mux16(sel=zx,a=x,b=false,out=xbuf);

    // negate x
    Not16(in=xbuf,out=notx);
    Mux16(sel=nx,a=xbuf,b=notx,out=xbuf2);

    // zero y
    Mux16(sel=zy,a=y,b=false,out=ybuf);

    // negate y
    Not16(in=ybuf,out=noty);
    Mux16(sel=ny,a=ybuf,b=noty,out=ybuf2);


    // calculate by f and no
    Add16(a=xbuf2,b=ybuf2,out=added);
    And16(a=xbuf2,b=ybuf2,out=anded);

    Mux16(sel=f,a=anded,b=added,out=calculated);
    Not16(in=calculated,out=calculatednot);

    Mux16(sel=no,a=calculated,b=calculatednot,out=result);

    // out
    And16(
      a=true,
      b=result,
      out=out,
      out[0]=out0,
      out[1]=out1,
      out[2]=out2,
      out[3]=out3,
      out[4]=out4,
      out[5]=out5,
      out[6]=out6,
      out[7]=out7,
      out[8]=out8,
      out[9]=out9,
      out[10]=out10,
      out[11]=out11,
      out[12]=out12,
      out[13]=out13,
      out[14]=out14,
      out[15]=out15
    );

    // ng
    And(a=true,b=out15,out=ng);

    // zr
    Or(a=out0,b=out1,out=temp1);
    Or(a=temp1,b=out2,out=temp2);
    Or(a=temp2,b=out3,out=temp3);
    Or(a=temp3,b=out4,out=temp4);
    Or(a=temp4,b=out5,out=temp5);
    Or(a=temp5,b=out6,out=temp6);
    Or(a=temp6,b=out7,out=temp7);
    Or(a=temp7,b=out8,out=temp8);
    Or(a=temp8,b=out9,out=temp9);
    Or(a=temp9,b=out10,out=temp10);
    Or(a=temp10,b=out11,out=temp11);
    Or(a=temp11,b=out12,out=temp12);
    Or(a=temp12,b=out13,out=temp13);
    Or(a=temp13,b=out14,out=temp14);
    Or(a=temp14,b=out15,out=temp15);
    Not(in=temp15,out=zr);
}
